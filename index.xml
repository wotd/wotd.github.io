<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>·òõ‚ÅêÃ§·ïê·ê∑</title>
    <link>https://www.n01.es/</link>
    <description>Recent content on ·òõ‚ÅêÃ§·ïê·ê∑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jun 2023 06:45:04 +0000</lastBuildDate><atom:link href="https://www.n01.es/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Change files extensions</title>
      <link>https://www.n01.es/posts/change-files-extensions/</link>
      <pubDate>Mon, 19 Jun 2023 06:45:04 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/change-files-extensions/</guid>
      <description>Simple example of bash script that is changing files extension in desired directory:
#!/bin/bash CURRENT_EXTENSION=&amp;#34;${1-mp3}&amp;#34; NEW_EXTENSION=&amp;#34;${2-mp4}&amp;#34; FILES_PATH=&amp;#34;${3-$PWD}&amp;#34; FILES_LIST=$(find ${FILES_PATH} -maxdepth 1 -name &amp;#34;*.${CURRENT_EXTENSION}&amp;#34;) for FILE in $FILES_LIST; do NEW_FILE=$(echo &amp;#34;$FILE&amp;#34; | sed &amp;#34;s/${CURRENT_EXTENSION}/${NEW_EXTENSION}/&amp;#34;) echo &amp;#34;Renaming file: $FILE -&amp;gt; $NEW_FILE&amp;#34; mv $FILE $NEW_FILE done Usage You can use it by simple executing file:
./change_ext.sh It will be executed with default settings: extensions to change: mp3, new extension will be mp4 and script will look for files in current directory.</description>
    </item>
    
    <item>
      <title>Useful Helm Commands</title>
      <link>https://www.n01.es/posts/useful-helm-commands/</link>
      <pubDate>Sun, 18 Jun 2023 11:54:00 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/useful-helm-commands/</guid>
      <description>This list will be upgraded!
List available chart versions helm search repo superset/superset --versions Show values for specific chart version helm show values superset/superset --version 0.8.7 </description>
    </item>
    
    <item>
      <title>CI CD Table</title>
      <link>https://www.n01.es/posts/ci-cd-table/</link>
      <pubDate>Sat, 06 May 2023 09:50:01 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/ci-cd-table/</guid>
      <description>Simple cheatsheet table to show differences between Continuous Integration / Continuous Delivery / Continuous Deployment
Continuous Integration Continuous Delivery Continuous Deployment Code builds and is properly tested Code builds and is properly tested Code builds and is properly tested Code is integrated to the codebase Code is integrated to the codebase Code is integrated to the codebase &amp;ndash; Code is ready for release Code is ready for release &amp;ndash; &amp;ndash; Code is automatically deployed at the end of the CI/CD pipeline </description>
    </item>
    
    <item>
      <title>Use Makefile for Vpn Automation</title>
      <link>https://www.n01.es/posts/use-makefile-for-vpn-automation/</link>
      <pubDate>Sun, 23 Apr 2023 11:06:45 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/use-makefile-for-vpn-automation/</guid>
      <description>Introduction In previous note I&amp;rsquo;ve showed how to run OpenVPN client inside of the Docker container. Today, we will prepare makefile to automate establishing connectivity.
Functions Makefile should:
verify if configuration is in place connect to VPN disconnect from VPN configure credentials (if required) Makefile development Let&amp;rsquo;s start development with simple, empty file:
touch makefile Variables declaration A Makefile can handle variables, and I find it useful to declare some of them at the beginning of the file.</description>
    </item>
    
    <item>
      <title>Diagrams as a Code</title>
      <link>https://www.n01.es/posts/diagrams-as-a-code/</link>
      <pubDate>Mon, 17 Apr 2023 21:46:11 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/diagrams-as-a-code/</guid>
      <description>Introduction Recently, I wanted to draw a simple network diagram, and I recalled a nice application I know. It can be used to draw cloud diagrams, and it supports main Cloud providers like Azure, AWS, and GCP. Just take a look at the webpage where you can find some nice examples.
I&amp;rsquo;ve prepared a simple Docker image, so you can try the application without installing anything.
Usage The Diagrams webpage is full of nice examples and documentation, so go there for further reading.</description>
    </item>
    
    <item>
      <title>OpenVPN in Docker</title>
      <link>https://www.n01.es/posts/openvpn-in-docker/</link>
      <pubDate>Mon, 17 Apr 2023 21:34:41 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/openvpn-in-docker/</guid>
      <description>Introduction OpenVPN is one of the most popular VPN systems. It runs smoothly on Windows, Linux, and macOS. But sometimes you would like to have the option to access some service (like an HTTP server or SSH), but you don&amp;rsquo;t want to install new software on your machine. Docker comes to the rescue üê≥
Access service behind VPN In this simple scenario, I would like to access a server (SSH, web, or anything else) located in a private network.</description>
    </item>
    
    
  </channel>
</rss>
