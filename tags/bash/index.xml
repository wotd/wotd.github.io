<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>bash on ᘛ⁐̤ᕐᐷ</title>
    <link>https://www.n01.es/tags/bash/</link>
    <description>Recent content in bash on ᘛ⁐̤ᕐᐷ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Oct 2023 10:26:00 +0000</lastBuildDate><atom:link href="https://www.n01.es/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash function example and trics</title>
      <link>https://www.n01.es/posts/bash-script-dir-structure-creation/</link>
      <pubDate>Thu, 19 Oct 2023 10:26:00 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/bash-script-dir-structure-creation/</guid>
      <description>Validata correct number of arguments if [ &amp;#34;$#&amp;#34; -ne 2 ]; then echo &amp;#34;Illegal number of parameters ($#, should be 2)&amp;#34; exit 1 fi $# returns number of parameters passed to script. If it&amp;rsquo;s less then 2, script ends with error.
Check if environment variable is set if [ -z &amp;#34;$CLEANING_JOB&amp;#34; ] then echo &amp;#34;Environmental variable [CLEANING_JOB] does not exist.&amp;#34; exit 1 fi Bash function example set_dir_structure() { YEAR=$(date +&amp;#34;%Y&amp;#34; &amp;#34;$@&amp;#34;) MONTH=$(date +&amp;#34;%m&amp;#34; &amp;#34;$@&amp;#34;) DAY=$(date +&amp;#34;%d&amp;#34; &amp;#34;$@&amp;#34;) HOUR=$(date +&amp;#34;%H&amp;#34; &amp;#34;$@&amp;#34;) retval=&amp;#34;$YEAR/$MONTH/$DAY/$HOUR&amp;#34; } This function can be executed with or without parameter to get proper dir structure related with date and time.</description>
    </item>
    
    <item>
      <title>Change files extensions</title>
      <link>https://www.n01.es/posts/change-files-extensions/</link>
      <pubDate>Mon, 19 Jun 2023 06:45:04 +0000</pubDate>
      
      <guid>https://www.n01.es/posts/change-files-extensions/</guid>
      <description>Simple example of bash script that is changing files extension in desired directory:
#!/bin/bash CURRENT_EXTENSION=&amp;#34;${1-mp3}&amp;#34; NEW_EXTENSION=&amp;#34;${2-mp4}&amp;#34; FILES_PATH=&amp;#34;${3-$PWD}&amp;#34; FILES_LIST=$(find ${FILES_PATH} -maxdepth 1 -name &amp;#34;*.${CURRENT_EXTENSION}&amp;#34;) for FILE in $FILES_LIST; do NEW_FILE=$(echo &amp;#34;$FILE&amp;#34; | sed &amp;#34;s/${CURRENT_EXTENSION}/${NEW_EXTENSION}/&amp;#34;) echo &amp;#34;Renaming file: $FILE -&amp;gt; $NEW_FILE&amp;#34; mv $FILE $NEW_FILE done Usage You can use it by simple executing file:
./change_ext.sh It will be executed with default settings: extensions to change: mp3, new extension will be mp4 and script will look for files in current directory.</description>
    </item>
    
  </channel>
</rss>
